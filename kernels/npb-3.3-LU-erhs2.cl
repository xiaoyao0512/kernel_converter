__kernel void A(__global double* a, __global double* b, __global double* c, int d, int e, int f) {
  int g, h, i, j;
  double k;
  double l;
  double m;
  double n, o, p, q;
  double r, s, t, u;

  i = get_global_id(1) + 1;
  h = get_global_id(0) + 1;
  if (i >= (f - 1) || h >= (e - 1))
    return;

  __global double(*v)[12 / 2 * 2 + 1][12 / 2 * 2 + 1][5] = (__global double(*)[12 / 2 * 2 + 1][12 / 2 * 2 + 1][5])a;
  __global double(*w)[12 / 2 * 2 + 1][12 / 2 * 2 + 1][5] = (__global double(*)[12 / 2 * 2 + 1][12 / 2 * 2 + 1][5])b;

  int x = (i - 1) * 12 + (h - 1);
  int y = x * 12 * 5;
  __global double(*z)[5] = (__global double(*)[5]) & c[y];

  for (g = 0; g < d; g++) {
    z[g][0] = v[i][h][g][1];
    l = v[i][h][g][1] / v[i][h][g][0];
    k = 0.50 * (v[i][h][g][1] * v[i][h][g][1] + v[i][h][g][2] * v[i][h][g][2] + v[i][h][g][3] * v[i][h][g][3]) / v[i][h][g][0];
    z[g][1] = v[i][h][g][1] * l + 0.40e+00 * (v[i][h][g][4] - k);
    z[g][2] = v[i][h][g][2] * l;
    z[g][3] = v[i][h][g][3] * l;
    z[g][4] = (1.40e+00 * v[i][h][g][4] - 0.40e+00 * k) * l;
  }

  for (g = 1; g < (d - 1); g++) {
    for (j = 0; j < 5; j++) {
      w[i][h][g][j] = w[i][h][g][j] - (1.0 / (2.0 * (1.0 / (12 - 1)))) * (z[g + 1][j] - z[g - 1][j]);
    }
  }
  for (g = 1; g < d; g++) {
    m = 1.0 / v[i][h][g][0];

    n = m * v[i][h][g][1];
    o = m * v[i][h][g][2];
    p = m * v[i][h][g][3];
    q = m * v[i][h][g][4];

    m = 1.0 / v[i][h][g - 1][0];

    r = m * v[i][h][g - 1][1];
    s = m * v[i][h][g - 1][2];
    t = m * v[i][h][g - 1][3];
    u = m * v[i][h][g - 1][4];

    z[g][1] = (4.0 / 3.0) * (1.0 / (1.0 / (12 - 1))) * (n - r);
    z[g][2] = (1.0 / (1.0 / (12 - 1))) * (o - s);
    z[g][3] = (1.0 / (1.0 / (12 - 1))) * (p - t);
    z[g][4] = 0.50 * (1.0 - 1.40e+00 * 1.40e+00) * (1.0 / (1.0 / (12 - 1))) * ((n * n + o * o + p * p) - (r * r + s * s + t * t)) + (1.0 / 6.0) * (1.0 / (1.0 / (12 - 1))) * (n * n - r * r) + 1.40e+00 * 1.40e+00 * (1.0 / (1.0 / (12 - 1))) * (q - u);
  }

  for (g = 1; g < (d - 1); g++) {
    w[i][h][g][0] = w[i][h][g][0] + 0.75 * (1.0 / ((1.0 / (12 - 1)) * (1.0 / (12 - 1)))) * (v[i][h][g - 1][0] - 2.0 * v[i][h][g][0] + v[i][h][g + 1][0]);
    w[i][h][g][1] = w[i][h][g][1] + (1.0 / (1.0 / (12 - 1))) * 1.00e-01 * 1.00e+00 * (z[g + 1][1] - z[g][1]) + 0.75 * (1.0 / ((1.0 / (12 - 1)) * (1.0 / (12 - 1)))) * (v[i][h][g - 1][1] - 2.0 * v[i][h][g][1] + v[i][h][g + 1][1]);
    w[i][h][g][2] = w[i][h][g][2] + (1.0 / (1.0 / (12 - 1))) * 1.00e-01 * 1.00e+00 * (z[g + 1][2] - z[g][2]) + 0.75 * (1.0 / ((1.0 / (12 - 1)) * (1.0 / (12 - 1)))) * (v[i][h][g - 1][2] - 2.0 * v[i][h][g][2] + v[i][h][g + 1][2]);
    w[i][h][g][3] = w[i][h][g][3] + (1.0 / (1.0 / (12 - 1))) * 1.00e-01 * 1.00e+00 * (z[g + 1][3] - z[g][3]) + 0.75 * (1.0 / ((1.0 / (12 - 1)) * (1.0 / (12 - 1)))) * (v[i][h][g - 1][3] - 2.0 * v[i][h][g][3] + v[i][h][g + 1][3]);
    w[i][h][g][4] = w[i][h][g][4] + (1.0 / (1.0 / (12 - 1))) * 1.00e-01 * 1.00e+00 * (z[g + 1][4] - z[g][4]) + 0.75 * (1.0 / ((1.0 / (12 - 1)) * (1.0 / (12 - 1)))) * (v[i][h][g - 1][4] - 2.0 * v[i][h][g][4] + v[i][h][g + 1][4]);
  }

  for (j = 0; j < 5; j++) {
    w[i][h][1][j] = w[i][h][1][j] - ((max(max(0.75, 0.75), 1.00)) / 4.0) * (+5.0 * v[i][h][1][j] - 4.0 * v[i][h][2][j] + v[i][h][3][j]);
    w[i][h][2][j] = w[i][h][2][j] - ((max(max(0.75, 0.75), 1.00)) / 4.0) * (-4.0 * v[i][h][1][j] + 6.0 * v[i][h][2][j] - 4.0 * v[i][h][3][j] + v[i][h][4][j]);
  }

  for (g = 3; g < d - 3; g++) {
    for (j = 0; j < 5; j++) {
      w[i][h][g][j] = w[i][h][g][j] - ((max(max(0.75, 0.75), 1.00)) / 4.0) * (v[i][h][g - 2][j] - 4.0 * v[i][h][g - 1][j] + 6.0 * v[i][h][g][j] - 4.0 * v[i][h][g + 1][j] + v[i][h][g + 2][j]);
    }
  }

  for (j = 0; j < 5; j++) {
    w[i][h][d - 3][j] = w[i][h][d - 3][j] - ((max(max(0.75, 0.75), 1.00)) / 4.0) * (v[i][h][d - 5][j] - 4.0 * v[i][h][d - 4][j] + 6.0 * v[i][h][d - 3][j] - 4.0 * v[i][h][d - 2][j]);
    w[i][h][d - 2][j] = w[i][h][d - 2][j] - ((max(max(0.75, 0.75), 1.00)) / 4.0) * (v[i][h][d - 4][j] - 4.0 * v[i][h][d - 3][j] + 5.0 * v[i][h][d - 2][j]);
  }
}
