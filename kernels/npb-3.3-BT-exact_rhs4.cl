__kernel void A(__global double* a, __global double* b, __global double* c, __global double* d, __global double* e, __constant double* f, int g, int h, int i) {
  double j[5], k, l, m, n;
  int o, p, q, r, s, t;

  q = get_global_id(1) + 1;
  p = get_global_id(0) + 1;
  if (q > (h - 2) || p > (g - 2))
    return;

  int u = (q - 1) * g + (p - 1);
  int v = u * 12 * 5;
  int w = u * 12;

  __global double(*x)[12 / 2 * 2 + 1][12 / 2 * 2 + 1][5] = (__global double(*)[12 / 2 * 2 + 1][12 / 2 * 2 + 1][5])a;
  __global double(*y)[5] = (__global double(*)[5]) & b[v];
  __global double(*z)[5] = (__global double(*)[5]) & c[v];
  __global double* aa = (__global double*)&d[w];
  __global double* ab = (__global double*)&e[w];

  l = (double)q * (1.0 / (double)(12 - 1));
  k = (double)p * (1.0 / (double)(12 - 1));

  for (r = 0; r < i; r++) {
    m = (double)r * (1.0 / (double)(12 - 1));

    A(k, l, m, j, f);
    for (o = 0; o < 5; o++) {
      y[r][o] = j[o];
    }

    n = 1.0 / j[0];

    for (o = 1; o < 5; o++) {
      z[r][o] = n * j[o];
    }

    aa[r] = z[r][3] * z[r][3];
    z[r][0] = aa[r] + z[r][1] * z[r][1] + z[r][2] * z[r][2];
    ab[r] = 0.5 * (z[r][1] * y[r][1] + z[r][2] * y[r][2] + z[r][3] * y[r][3]);
  }

  for (r = 1; r <= i - 2; r++) {
    s = r - 1;
    t = r + 1;

    x[r][q][p][0] = x[r][q][p][0] - (1.0 / (2.0 * (1.0 / (double)(12 - 1)))) * (y[t][3] - y[s][3]) + (1.0 * (1.0 / ((1.0 / (double)(12 - 1)) * (1.0 / (double)(12 - 1))))) * (y[t][0] - 2.0 * y[r][0] + y[s][0]);

    x[r][q][p][1] = x[r][q][p][1] - (1.0 / (2.0 * (1.0 / (double)(12 - 1)))) * (y[t][1] * z[t][3] - y[s][1] * z[s][3]) + (((0.1 * 1.0) * (1.0 / (1.0 / (double)(12 - 1)))) * (1.0 / (1.0 / (double)(12 - 1)))) * (z[t][1] - 2.0 * z[r][1] + z[s][1]) + (1.0 * (1.0 / ((1.0 / (double)(12 - 1)) * (1.0 / (double)(12 - 1))))) * (y[t][1] - 2.0 * y[r][1] + y[s][1]);

    x[r][q][p][2] = x[r][q][p][2] - (1.0 / (2.0 * (1.0 / (double)(12 - 1)))) * (y[t][2] * z[t][3] - y[s][2] * z[s][3]) + (((0.1 * 1.0) * (1.0 / (1.0 / (double)(12 - 1)))) * (1.0 / (1.0 / (double)(12 - 1)))) * (z[t][2] - 2.0 * z[r][2] + z[s][2]) + (1.0 * (1.0 / ((1.0 / (double)(12 - 1)) * (1.0 / (double)(12 - 1))))) * (y[t][2] - 2.0 * y[r][2] + y[s][2]);

    x[r][q][p][3] = x[r][q][p][3] - (1.0 / (2.0 * (1.0 / (double)(12 - 1)))) * ((y[t][3] * z[t][3] + 0.4 * (y[t][4] - ab[t])) - (y[s][3] * z[s][3] + 0.4 * (y[s][4] - ab[s]))) + (((0.1 * 1.0) * (1.0 / (1.0 / (double)(12 - 1)))) * (4.0 / 3.0) * (1.0 / (1.0 / (double)(12 - 1)))) * (z[t][3] - 2.0 * z[r][3] + z[s][3]) + (1.0 * (1.0 / ((1.0 / (double)(12 - 1)) * (1.0 / (double)(12 - 1))))) * (y[t][3] - 2.0 * y[r][3] + y[s][3]);

    x[r][q][p][4] = x[r][q][p][4] - (1.0 / (2.0 * (1.0 / (double)(12 - 1)))) * (z[t][3] * (1.4 * y[t][4] - 0.4 * ab[t]) - z[s][3] * (1.4 * y[s][4] - 0.4 * ab[s])) + 0.5 * (((0.1 * 1.0) * (1.0 / (1.0 / (double)(12 - 1)))) * (1.0 - (1.4 * 1.4)) * (1.0 / (1.0 / (double)(12 - 1)))) * (z[t][0] - 2.0 * z[r][0] + z[s][0]) + (((0.1 * 1.0) * (1.0 / (1.0 / (double)(12 - 1)))) * (1.0 / 6.0) * (1.0 / (1.0 / (double)(12 - 1)))) * (aa[t] - 2.0 * aa[r] + aa[s]) +
                    (((0.1 * 1.0) * (1.0 / (1.0 / (double)(12 - 1)))) * (1.4 * 1.4) * (1.0 / (1.0 / (double)(12 - 1)))) * (z[t][4] - 2.0 * z[r][4] + z[s][4]) + (1.0 * (1.0 / ((1.0 / (double)(12 - 1)) * (1.0 / (double)(12 - 1))))) * (y[t][4] - 2.0 * y[r][4] + y[s][4]);
  }

  for (o = 0; o < 5; o++) {
    r = 1;
    x[r][q][p][o] = x[r][q][p][o] - (0.25 * ((0.75) > (((0.75) > (1.0) ? (0.75) : (1.0))) ? (0.75) : (((0.75) > (1.0) ? (0.75) : (1.0))))) * (5.0 * y[r][o] - 4.0 * y[r + 1][o] + y[r + 2][o]);
    r = 2;
    x[r][q][p][o] = x[r][q][p][o] - (0.25 * ((0.75) > (((0.75) > (1.0) ? (0.75) : (1.0))) ? (0.75) : (((0.75) > (1.0) ? (0.75) : (1.0))))) * (-4.0 * y[r - 1][o] + 6.0 * y[r][o] - 4.0 * y[r + 1][o] + y[r + 2][o]);
  }

  for (o = 0; o < 5; o++) {
    for (r = 3; r <= i - 4; r++) {
      x[r][q][p][o] = x[r][q][p][o] - (0.25 * ((0.75) > (((0.75) > (1.0) ? (0.75) : (1.0))) ? (0.75) : (((0.75) > (1.0) ? (0.75) : (1.0))))) * (y[r - 2][o] - 4.0 * y[r - 1][o] + 6.0 * y[r][o] - 4.0 * y[r + 1][o] + y[r + 2][o]);
    }
  }

  for (o = 0; o < 5; o++) {
    r = i - 3;
    x[r][q][p][o] = x[r][q][p][o] - (0.25 * ((0.75) > (((0.75) > (1.0) ? (0.75) : (1.0))) ? (0.75) : (((0.75) > (1.0) ? (0.75) : (1.0))))) * (y[r - 2][o] - 4.0 * y[r - 1][o] + 6.0 * y[r][o] - 4.0 * y[r + 1][o]);
    r = i - 2;
    x[r][q][p][o] = x[r][q][p][o] - (0.25 * ((0.75) > (((0.75) > (1.0) ? (0.75) : (1.0))) ? (0.75) : (((0.75) > (1.0) ? (0.75) : (1.0))))) * (y[r - 2][o] - 4.0 * y[r - 1][o] + 5.0 * y[r][o]);
  }
}
